**************t*****************
!
-
Tag
*
,
+
int
return
>=
/
<=
>
const
<
default
break
void
case
INT
(
Ident
{
;
%
$
struct
switch
)
:
=
==
}
!=
**************not t*****************
caseDecl
defaultCaseDecl
switchDecl
structBlockItem
structBlock
structDef
opVar
structDecl
constExp
breakDecl
assignExpAtom
assignExp
eqExpAtom
relExpAtom
relExp
stmt
lVal
structName
funcType
opBlock
argVarDef
bType
argStructDef
blockItem
addExp
funcDef
funcFParam
initVal
argFunctionR
argVarDecl
constDef
block
mulExp
compUnit
program
constInitVal
decl
varDef
argConst
eqExp
argFunctionF
argExp
constDecl
primaryExp
exp
unaryExp
number
funcFParams
varDecl
unaryOp
callFunc
funcRParams
funcRParam
mulExpAtom
addExpAtom
************* FIRST ************
          caseDecl -> case $ 
   defaultCaseDecl -> $ default 
        switchDecl -> switch 
   structBlockItem -> ! + - Ident ( void const return $ struct int INT ; { 
       structBlock -> { 
         structDef -> Ident 
             opVar -> ; Ident 
        structDecl -> struct 
          constExp -> INT ( Ident - + ! 
         breakDecl -> break $ 
     assignExpAtom -> $ = 
         assignExp -> + ! - Ident ( INT 
         eqExpAtom -> $ == != 
        relExpAtom -> $ >= < <= > 
            relExp -> ! + - Ident INT ( 
              stmt -> return { ; INT ( Ident - + ! 
              lVal -> Ident 
        structName -> Ident 
          funcType -> void 
           opBlock -> Ident { 
         argVarDef -> $ = 
             bType -> int 
      argStructDef -> $ , 
         blockItem -> ! + - Ident ( const return $ struct int INT { ; 
            addExp -> INT ( Ident - + ! 
           funcDef -> void 
        funcFParam -> struct int 
           initVal -> ! + - Ident INT ( 
      argFunctionR -> $ , 
        argVarDecl -> $ , 
          constDef -> Ident 
             block -> { 
            mulExp -> + ! - Ident ( INT 
          compUnit -> $ int void struct const 
           program -> $ const int struct void 
      constInitVal -> ! + - Ident INT ( 
              decl -> struct const int 
            varDef -> Ident 
          argConst -> $ , 
             eqExp -> ( INT Ident - ! + 
      argFunctionF -> $ , 
            argExp -> ! INT ( Ident $ - + 
         constDecl -> const 
        primaryExp -> INT ( 
               exp -> INT ( Ident - + ! 
          unaryExp -> ( INT Ident - ! + 
            number -> INT 
       funcFParams -> $ struct int 
           varDecl -> int 
           unaryOp -> ! + - 
          callFunc -> $ ( 
       funcRParams -> $ + ! - INT Ident ( 
        funcRParam -> ! + - Ident INT ( 
        mulExpAtom -> % $ * / 
        addExpAtom -> $ + - 

************** FOLLOW *************
          caseDecl : default } 
   defaultCaseDecl : } 
        switchDecl : 
   structBlockItem : } 
       structBlock : ; Ident 
         structDef : break } - void const ! ; { ( Ident INT + int struct # return 
             opVar : break } - void const ! ; { ( Ident INT + int struct # return 
        structDecl : break } - void const ! ; { ( Ident INT + int struct # return 
          constExp : ; , : 
         breakDecl : } 
     assignExpAtom : , ) : ; 
         assignExp : , ) ; : 
         eqExpAtom : , ) ; : = 
        relExpAtom : , == != ; = : ) 
            relExp : , ) != == ; : = 
              stmt : break } ( Ident - void const ! + ; { INT int struct return 
              lVal : 
        structName : Ident { 
          funcType : Ident 
           opBlock : # return struct { ; int + ! const void - INT Ident ( } break 
         argVarDef : , ; 
             bType : Ident 
      argStructDef : ; 
         blockItem : break } 
            addExp : , == < != >= ) > <= = : ; 
           funcDef : # } ( Ident - void const ! + ; { INT int struct return 
        funcFParam : ) , 
           initVal : ; , 
      argFunctionR : ) 
        argVarDecl : ; 
          constDef : ; , 
             block : break } - void const ! ; { ( Ident INT + int struct # return 
            mulExp : , > < != == + <= >= - : = ; ) 
          compUnit : # 
           program : # 
      constInitVal : , ; 
              decl : # break } ( Ident - void const ! + ; { INT int struct return 
            varDef : ; , 
          argConst : ; 
             eqExp : , = ) : ; 
      argFunctionF : ) 
            argExp : ; 
         constDecl : break } - void const ! ; { ( Ident INT + int struct # return 
        primaryExp : ) ; = - <= : + == % , < * != > >= / 
               exp : , ) ; 
          unaryExp : ; ) : = , * % >= > < == != + / <= - 
            number : ; ) / >= > != % , * < == : + <= = - 
       funcFParams : ) 
           varDecl : break } - void const ! ; { ( Ident INT + int struct # return 
           unaryOp : INT ( Ident - + ! 
          callFunc : ) ; = - <= : + == % , < * != > >= / 
       funcRParams : ) 
        funcRParam : ) , 
        mulExpAtom : , - >= <= + == != < > = ; : ) 
        addExpAtom : ) ; = : == != < , >= <= > 

